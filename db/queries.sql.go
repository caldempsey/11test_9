// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const BuildCreate = `-- name: BuildCreate :exec
insert into unweave.build (id, project_id, builder_type, created_at)
values ($1, $2, $3, $4)
`

type BuildCreateParams struct {
	ID          string    `json:"id"`
	ProjectID   string    `json:"projectID"`
	BuilderType string    `json:"builderType"`
	CreatedAt   time.Time `json:"createdAt"`
}

func (q *Queries) BuildCreate(ctx context.Context, arg BuildCreateParams) error {
	_, err := q.db.ExecContext(ctx, BuildCreate,
		arg.ID,
		arg.ProjectID,
		arg.BuilderType,
		arg.CreatedAt,
	)
	return err
}

const BuildGet = `-- name: BuildGet :one
select id, project_id, builder_type, status, created_at, meta_data
from unweave.build
where id = $1
`

func (q *Queries) BuildGet(ctx context.Context, id string) (UnweaveBuild, error) {
	row := q.db.QueryRowContext(ctx, BuildGet, id)
	var i UnweaveBuild
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BuilderType,
		&i.Status,
		&i.CreatedAt,
		&i.MetaData,
	)
	return i, err
}

const MxSessionGet = `-- name: MxSessionGet :one

select s.id,
       s.status,
       s.node_id,
       s.provider,
       s.region,
       s.created_at,
       s.connection_info,
       ssh_key.name       as ssh_key_name,
       ssh_key.public_key,
       ssh_key.created_at as ssh_key_created_at
from unweave.session as s
         join unweave.ssh_key on s.ssh_key_id = ssh_key.id
where s.id = $1
`

type MxSessionGetRow struct {
	ID              string               `json:"id"`
	Status          UnweaveSessionStatus `json:"status"`
	NodeID          string               `json:"nodeID"`
	Provider        string               `json:"provider"`
	Region          string               `json:"region"`
	CreatedAt       time.Time            `json:"createdAt"`
	ConnectionInfo  json.RawMessage      `json:"connectionInfo"`
	SshKeyName      string               `json:"sshKeyName"`
	PublicKey       string               `json:"publicKey"`
	SshKeyCreatedAt time.Time            `json:"sshKeyCreatedAt"`
}

// -----------------------------------------------------------------
// The queries below return data in the format expected by the API.
// -----------------------------------------------------------------
func (q *Queries) MxSessionGet(ctx context.Context, id string) (MxSessionGetRow, error) {
	row := q.db.QueryRowContext(ctx, MxSessionGet, id)
	var i MxSessionGetRow
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.NodeID,
		&i.Provider,
		&i.Region,
		&i.CreatedAt,
		&i.ConnectionInfo,
		&i.SshKeyName,
		&i.PublicKey,
		&i.SshKeyCreatedAt,
	)
	return i, err
}

const MxSessionsGet = `-- name: MxSessionsGet :many
select s.id,
       s.status,
       s.node_id,
       s.provider,
       s.region,
       s.created_at,
       s.connection_info,
       ssh_key.name       as ssh_key_name,
       ssh_key.public_key,
       ssh_key.created_at as ssh_key_created_at
from unweave.session as s
         join unweave.ssh_key on s.ssh_key_id = ssh_key.id
where s.project_id = $1
`

type MxSessionsGetRow struct {
	ID              string               `json:"id"`
	Status          UnweaveSessionStatus `json:"status"`
	NodeID          string               `json:"nodeID"`
	Provider        string               `json:"provider"`
	Region          string               `json:"region"`
	CreatedAt       time.Time            `json:"createdAt"`
	ConnectionInfo  json.RawMessage      `json:"connectionInfo"`
	SshKeyName      string               `json:"sshKeyName"`
	PublicKey       string               `json:"publicKey"`
	SshKeyCreatedAt time.Time            `json:"sshKeyCreatedAt"`
}

func (q *Queries) MxSessionsGet(ctx context.Context, projectID string) ([]MxSessionsGetRow, error) {
	rows, err := q.db.QueryContext(ctx, MxSessionsGet, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MxSessionsGetRow
	for rows.Next() {
		var i MxSessionsGetRow
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.NodeID,
			&i.Provider,
			&i.Region,
			&i.CreatedAt,
			&i.ConnectionInfo,
			&i.SshKeyName,
			&i.PublicKey,
			&i.SshKeyCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ProjectGet = `-- name: ProjectGet :one
select id, name, icon, owner_id, created_at
from unweave.project
where id = $1
`

func (q *Queries) ProjectGet(ctx context.Context, id string) (UnweaveProject, error) {
	row := q.db.QueryRowContext(ctx, ProjectGet, id)
	var i UnweaveProject
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const SSHKeyAdd = `-- name: SSHKeyAdd :exec
insert into unweave.ssh_key (owner_id, name, public_key)
values ($1, $2, $3)
`

type SSHKeyAddParams struct {
	OwnerID   uuid.UUID `json:"ownerID"`
	Name      string    `json:"name"`
	PublicKey string    `json:"publicKey"`
}

func (q *Queries) SSHKeyAdd(ctx context.Context, arg SSHKeyAddParams) error {
	_, err := q.db.ExecContext(ctx, SSHKeyAdd, arg.OwnerID, arg.Name, arg.PublicKey)
	return err
}

const SSHKeyGetByName = `-- name: SSHKeyGetByName :one
select id, name, owner_id, created_at, public_key, is_active
from unweave.ssh_key
where name = $1
  and owner_id = $2
`

type SSHKeyGetByNameParams struct {
	Name    string    `json:"name"`
	OwnerID uuid.UUID `json:"ownerID"`
}

func (q *Queries) SSHKeyGetByName(ctx context.Context, arg SSHKeyGetByNameParams) (UnweaveSshKey, error) {
	row := q.db.QueryRowContext(ctx, SSHKeyGetByName, arg.Name, arg.OwnerID)
	var i UnweaveSshKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.PublicKey,
		&i.IsActive,
	)
	return i, err
}

const SSHKeyGetByPublicKey = `-- name: SSHKeyGetByPublicKey :one
select id, name, owner_id, created_at, public_key, is_active
from unweave.ssh_key
where public_key = $1
  and owner_id = $2
`

type SSHKeyGetByPublicKeyParams struct {
	PublicKey string    `json:"publicKey"`
	OwnerID   uuid.UUID `json:"ownerID"`
}

func (q *Queries) SSHKeyGetByPublicKey(ctx context.Context, arg SSHKeyGetByPublicKeyParams) (UnweaveSshKey, error) {
	row := q.db.QueryRowContext(ctx, SSHKeyGetByPublicKey, arg.PublicKey, arg.OwnerID)
	var i UnweaveSshKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.PublicKey,
		&i.IsActive,
	)
	return i, err
}

const SSHKeysGet = `-- name: SSHKeysGet :many
select id, name, owner_id, created_at, public_key, is_active
from unweave.ssh_key
where owner_id = $1
`

func (q *Queries) SSHKeysGet(ctx context.Context, ownerID uuid.UUID) ([]UnweaveSshKey, error) {
	rows, err := q.db.QueryContext(ctx, SSHKeysGet, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnweaveSshKey
	for rows.Next() {
		var i UnweaveSshKey
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.CreatedAt,
			&i.PublicKey,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SessionCreate = `-- name: SessionCreate :one
insert into unweave.session (node_id, created_by, project_id, provider, ssh_key_id,
                             region, name, connection_info)
values ($1, $2, $3, $4, (select id
                         from unweave.ssh_key as ssh_keys
                         where ssh_keys.name = $8
                           and owner_id = $2), $5, $6, $7)
returning id
`

type SessionCreateParams struct {
	NodeID         string          `json:"nodeID"`
	CreatedBy      uuid.UUID       `json:"createdBy"`
	ProjectID      string          `json:"projectID"`
	Provider       string          `json:"provider"`
	Region         string          `json:"region"`
	Name           string          `json:"name"`
	ConnectionInfo json.RawMessage `json:"connectionInfo"`
	SshKeyName     string          `json:"sshKeyName"`
}

func (q *Queries) SessionCreate(ctx context.Context, arg SessionCreateParams) (string, error) {
	row := q.db.QueryRowContext(ctx, SessionCreate,
		arg.NodeID,
		arg.CreatedBy,
		arg.ProjectID,
		arg.Provider,
		arg.Region,
		arg.Name,
		arg.ConnectionInfo,
		arg.SshKeyName,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const SessionGet = `-- name: SessionGet :one
select id, name, node_id, region, created_by, created_at, ready_at, exited_at, status, project_id, provider, ssh_key_id, connection_info, error
from unweave.session
where id = $1
`

func (q *Queries) SessionGet(ctx context.Context, id string) (UnweaveSession, error) {
	row := q.db.QueryRowContext(ctx, SessionGet, id)
	var i UnweaveSession
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.NodeID,
		&i.Region,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ReadyAt,
		&i.ExitedAt,
		&i.Status,
		&i.ProjectID,
		&i.Provider,
		&i.SshKeyID,
		&i.ConnectionInfo,
		&i.Error,
	)
	return i, err
}

const SessionGetAllActive = `-- name: SessionGetAllActive :many
select id, name, node_id, region, created_by, created_at, ready_at, exited_at, status, project_id, provider, ssh_key_id, connection_info, error
from unweave.session
where status = 'initializing'
   or status = 'running'
`

func (q *Queries) SessionGetAllActive(ctx context.Context) ([]UnweaveSession, error) {
	rows, err := q.db.QueryContext(ctx, SessionGetAllActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnweaveSession
	for rows.Next() {
		var i UnweaveSession
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.NodeID,
			&i.Region,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ReadyAt,
			&i.ExitedAt,
			&i.Status,
			&i.ProjectID,
			&i.Provider,
			&i.SshKeyID,
			&i.ConnectionInfo,
			&i.Error,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SessionSetError = `-- name: SessionSetError :exec
update unweave.session
set status = 'error'::unweave.session_status,
    error  = $2
where id = $1
`

type SessionSetErrorParams struct {
	ID    string         `json:"id"`
	Error sql.NullString `json:"error"`
}

func (q *Queries) SessionSetError(ctx context.Context, arg SessionSetErrorParams) error {
	_, err := q.db.ExecContext(ctx, SessionSetError, arg.ID, arg.Error)
	return err
}

const SessionStatusUpdate = `-- name: SessionStatusUpdate :exec
update unweave.session
set status = $2
where id = $1
`

type SessionStatusUpdateParams struct {
	ID     string               `json:"id"`
	Status UnweaveSessionStatus `json:"status"`
}

func (q *Queries) SessionStatusUpdate(ctx context.Context, arg SessionStatusUpdateParams) error {
	_, err := q.db.ExecContext(ctx, SessionStatusUpdate, arg.ID, arg.Status)
	return err
}

const SessionUpdateConnectionInfo = `-- name: SessionUpdateConnectionInfo :exec
update unweave.session
set connection_info = $2
where id = $1
`

type SessionUpdateConnectionInfoParams struct {
	ID             string          `json:"id"`
	ConnectionInfo json.RawMessage `json:"connectionInfo"`
}

func (q *Queries) SessionUpdateConnectionInfo(ctx context.Context, arg SessionUpdateConnectionInfoParams) error {
	_, err := q.db.ExecContext(ctx, SessionUpdateConnectionInfo, arg.ID, arg.ConnectionInfo)
	return err
}

const SessionsGet = `-- name: SessionsGet :many
select session.id, ssh_key.name as ssh_key_name, session.status
from unweave.session
         left join unweave.ssh_key
                   on ssh_key.id = session.ssh_key_id
where project_id = $1
order by unweave.session.created_at desc
limit $2 offset $3
`

type SessionsGetParams struct {
	ProjectID string `json:"projectID"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

type SessionsGetRow struct {
	ID         string               `json:"id"`
	SshKeyName sql.NullString       `json:"sshKeyName"`
	Status     UnweaveSessionStatus `json:"status"`
}

func (q *Queries) SessionsGet(ctx context.Context, arg SessionsGetParams) ([]SessionsGetRow, error) {
	rows, err := q.db.QueryContext(ctx, SessionsGet, arg.ProjectID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionsGetRow
	for rows.Next() {
		var i SessionsGetRow
		if err := rows.Scan(&i.ID, &i.SshKeyName, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
