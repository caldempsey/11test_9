// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/lib/pq"
)

const BuildCreate = `-- name: BuildCreate :one
insert into unweave.build (project_id, builder_type, name, created_by, started_at)
values ($1, $2, $3, $4, case
                            when $5::timestamptz = '0001-01-01 00:00:00 UTC'::timestamptz
                                then now()
                            else $5::timestamptz end)
returning id
`

type BuildCreateParams struct {
	ProjectID   string    `json:"projectID"`
	BuilderType string    `json:"builderType"`
	Name        string    `json:"name"`
	CreatedBy   string    `json:"createdBy"`
	StartedAt   time.Time `json:"startedAt"`
}

func (q *Queries) BuildCreate(ctx context.Context, arg BuildCreateParams) (string, error) {
	row := q.db.QueryRowContext(ctx, BuildCreate,
		arg.ProjectID,
		arg.BuilderType,
		arg.Name,
		arg.CreatedBy,
		arg.StartedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const BuildGet = `-- name: BuildGet :one
select id, name, project_id, builder_type, status, created_by, created_at, started_at, finished_at, updated_at, meta_data
from unweave.build
where id = $1
`

func (q *Queries) BuildGet(ctx context.Context, id string) (UnweaveBuild, error) {
	row := q.db.QueryRowContext(ctx, BuildGet, id)
	var i UnweaveBuild
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProjectID,
		&i.BuilderType,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.StartedAt,
		&i.FinishedAt,
		&i.UpdatedAt,
		&i.MetaData,
	)
	return i, err
}

const BuildGetUsedBy = `-- name: BuildGetUsedBy :many
select s.id, s.name, s.node_id, s.region, s.created_by, s.created_at, s.ready_at, s.exited_at, s.status, s.project_id, s.ssh_key_id, s.error, s.build_id, s.spec, s.commit_id, s.git_remote_url, s.command, s.metadata, s.persist_fs, n.provider
from (select id from unweave.build as ub where ub.id = $1) as b
         join unweave.session s
              on s.build_id = b.id
         join unweave.node as n on s.node_id = n.id
`

type BuildGetUsedByRow struct {
	ID           string               `json:"id"`
	Name         string               `json:"name"`
	NodeID       string               `json:"nodeID"`
	Region       string               `json:"region"`
	CreatedBy    string               `json:"createdBy"`
	CreatedAt    time.Time            `json:"createdAt"`
	ReadyAt      sql.NullTime         `json:"readyAt"`
	ExitedAt     sql.NullTime         `json:"exitedAt"`
	Status       UnweaveSessionStatus `json:"status"`
	ProjectID    string               `json:"projectID"`
	SshKeyID     sql.NullString       `json:"sshKeyID"`
	Error        sql.NullString       `json:"error"`
	BuildID      sql.NullString       `json:"buildID"`
	Spec         json.RawMessage      `json:"spec"`
	CommitID     sql.NullString       `json:"commitID"`
	GitRemoteUrl sql.NullString       `json:"gitRemoteUrl"`
	Command      []string             `json:"command"`
	Metadata     json.RawMessage      `json:"metadata"`
	PersistFs    bool                 `json:"persistFs"`
	Provider     string               `json:"provider"`
}

func (q *Queries) BuildGetUsedBy(ctx context.Context, id string) ([]BuildGetUsedByRow, error) {
	rows, err := q.db.QueryContext(ctx, BuildGetUsedBy, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BuildGetUsedByRow
	for rows.Next() {
		var i BuildGetUsedByRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.NodeID,
			&i.Region,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ReadyAt,
			&i.ExitedAt,
			&i.Status,
			&i.ProjectID,
			&i.SshKeyID,
			&i.Error,
			&i.BuildID,
			&i.Spec,
			&i.CommitID,
			&i.GitRemoteUrl,
			pq.Array(&i.Command),
			&i.Metadata,
			&i.PersistFs,
			&i.Provider,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const BuildUpdate = `-- name: BuildUpdate :exec
update unweave.build
set status      = $2,
    meta_data   = $3,
    started_at  = coalesce(
            nullif($4::timestamptz, '0001-01-01 00:00:00 UTC'::timestamptz),
            started_at),
    finished_at = coalesce(
            nullif($5::timestamptz, '0001-01-01 00:00:00 UTC'::timestamptz),
            finished_at)
where id = $1
`

type BuildUpdateParams struct {
	ID         string             `json:"id"`
	Status     UnweaveBuildStatus `json:"status"`
	MetaData   json.RawMessage    `json:"metaData"`
	StartedAt  time.Time          `json:"startedAt"`
	FinishedAt time.Time          `json:"finishedAt"`
}

func (q *Queries) BuildUpdate(ctx context.Context, arg BuildUpdateParams) error {
	_, err := q.db.ExecContext(ctx, BuildUpdate,
		arg.ID,
		arg.Status,
		arg.MetaData,
		arg.StartedAt,
		arg.FinishedAt,
	)
	return err
}

const FilesystemCreate = `-- name: FilesystemCreate :one
insert into unweave.filesystem (name, project_id, owner_id, exec_id, src_path)
values ($1, $2, $3, $4, $5)
returning id, name, project_id, exec_id, owner_id, created_at, src_path
`

type FilesystemCreateParams struct {
	Name      string `json:"name"`
	ProjectID string `json:"projectID"`
	OwnerID   string `json:"ownerID"`
	ExecID    string `json:"execID"`
	SrcPath   string `json:"srcPath"`
}

func (q *Queries) FilesystemCreate(ctx context.Context, arg FilesystemCreateParams) (UnweaveFilesystem, error) {
	row := q.db.QueryRowContext(ctx, FilesystemCreate,
		arg.Name,
		arg.ProjectID,
		arg.OwnerID,
		arg.ExecID,
		arg.SrcPath,
	)
	var i UnweaveFilesystem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProjectID,
		&i.ExecID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.SrcPath,
	)
	return i, err
}

const FilesystemCreateVersion = `-- name: FilesystemCreateVersion :one
select filesystem_id, exec_id, version, created_at, build_id
from unweave.insert_filesystem_version($1, $2)
`

type FilesystemCreateVersionParams struct {
	FilesystemID string `json:"filesystemID"`
	ExecID       string `json:"execID"`
}

func (q *Queries) FilesystemCreateVersion(ctx context.Context, arg FilesystemCreateVersionParams) (UnweaveFilesystemVersion, error) {
	row := q.db.QueryRowContext(ctx, FilesystemCreateVersion, arg.FilesystemID, arg.ExecID)
	var i UnweaveFilesystemVersion
	err := row.Scan(
		&i.FilesystemID,
		&i.ExecID,
		&i.Version,
		&i.CreatedAt,
		&i.BuildID,
	)
	return i, err
}

const FilesystemGet = `-- name: FilesystemGet :one
select id, name, project_id, exec_id, owner_id, created_at, src_path
from unweave.filesystem
where id = $1
`

func (q *Queries) FilesystemGet(ctx context.Context, id string) (UnweaveFilesystem, error) {
	row := q.db.QueryRowContext(ctx, FilesystemGet, id)
	var i UnweaveFilesystem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProjectID,
		&i.ExecID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.SrcPath,
	)
	return i, err
}

const FilesystemGetByExecID = `-- name: FilesystemGetByExecID :one
select b.id, b.name, b.project_id, b.exec_id, b.owner_id, b.created_at, b.src_path
from (select filesystem_id
      from unweave.filesystem_version
      where filesystem_version.exec_id = $1) as bv
         join unweave.filesystem b on b.id = filesystem_id
`

func (q *Queries) FilesystemGetByExecID(ctx context.Context, execID string) (UnweaveFilesystem, error) {
	row := q.db.QueryRowContext(ctx, FilesystemGetByExecID, execID)
	var i UnweaveFilesystem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProjectID,
		&i.ExecID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.SrcPath,
	)
	return i, err
}

const FilesystemGetByProject = `-- name: FilesystemGetByProject :one
select id, name, project_id, exec_id, owner_id, created_at, src_path
from unweave.filesystem
where project_id = $1
  and (name = $2 or id = $2)
`

type FilesystemGetByProjectParams struct {
	ProjectID string `json:"projectID"`
	NameOrID  string `json:"nameOrID"`
}

func (q *Queries) FilesystemGetByProject(ctx context.Context, arg FilesystemGetByProjectParams) (UnweaveFilesystem, error) {
	row := q.db.QueryRowContext(ctx, FilesystemGetByProject, arg.ProjectID, arg.NameOrID)
	var i UnweaveFilesystem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProjectID,
		&i.ExecID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.SrcPath,
	)
	return i, err
}

const FilesystemGetLatestVersion = `-- name: FilesystemGetLatestVersion :one
select filesystem_id, exec_id, version, created_at, build_id
from unweave.filesystem_version
where filesystem_id = $1
order by version desc
limit 1
`

func (q *Queries) FilesystemGetLatestVersion(ctx context.Context, filesystemID string) (UnweaveFilesystemVersion, error) {
	row := q.db.QueryRowContext(ctx, FilesystemGetLatestVersion, filesystemID)
	var i UnweaveFilesystemVersion
	err := row.Scan(
		&i.FilesystemID,
		&i.ExecID,
		&i.Version,
		&i.CreatedAt,
		&i.BuildID,
	)
	return i, err
}

const FilesystemVersionAddBuildID = `-- name: FilesystemVersionAddBuildID :exec
update unweave.filesystem_version
set build_id = $2
where exec_id = $1
`

type FilesystemVersionAddBuildIDParams struct {
	ExecID  string         `json:"execID"`
	BuildID sql.NullString `json:"buildID"`
}

func (q *Queries) FilesystemVersionAddBuildID(ctx context.Context, arg FilesystemVersionAddBuildIDParams) error {
	_, err := q.db.ExecContext(ctx, FilesystemVersionAddBuildID, arg.ExecID, arg.BuildID)
	return err
}

const FilesystemVersionGet = `-- name: FilesystemVersionGet :one
select filesystem_id, exec_id, version, created_at, build_id
from unweave.filesystem_version
where exec_id = $1
`

func (q *Queries) FilesystemVersionGet(ctx context.Context, execID string) (UnweaveFilesystemVersion, error) {
	row := q.db.QueryRowContext(ctx, FilesystemVersionGet, execID)
	var i UnweaveFilesystemVersion
	err := row.Scan(
		&i.FilesystemID,
		&i.ExecID,
		&i.Version,
		&i.CreatedAt,
		&i.BuildID,
	)
	return i, err
}

const MxSessionGet = `-- name: MxSessionGet :one

select s.id,
       s.name,
       s.status,
       s.node_id,
       n.provider,
       s.region,
       s.created_at,
       s.metadata,
       s.persist_fs,
       ssh_key.name       as ssh_key_name,
       ssh_key.public_key,
       ssh_key.created_at as ssh_key_created_at
from unweave.session as s
         join unweave.ssh_key on s.ssh_key_id = ssh_key.id
         join unweave.node as n on s.node_id = n.id
where s.id = $1
`

type MxSessionGetRow struct {
	ID              string               `json:"id"`
	Name            string               `json:"name"`
	Status          UnweaveSessionStatus `json:"status"`
	NodeID          string               `json:"nodeID"`
	Provider        string               `json:"provider"`
	Region          string               `json:"region"`
	CreatedAt       time.Time            `json:"createdAt"`
	Metadata        json.RawMessage      `json:"metadata"`
	PersistFs       bool                 `json:"persistFs"`
	SshKeyName      string               `json:"sshKeyName"`
	PublicKey       string               `json:"publicKey"`
	SshKeyCreatedAt time.Time            `json:"sshKeyCreatedAt"`
}

// -----------------------------------------------------------------
// The queries below return data in the format expected by the API.
// -----------------------------------------------------------------
func (q *Queries) MxSessionGet(ctx context.Context, id string) (MxSessionGetRow, error) {
	row := q.db.QueryRowContext(ctx, MxSessionGet, id)
	var i MxSessionGetRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.NodeID,
		&i.Provider,
		&i.Region,
		&i.CreatedAt,
		&i.Metadata,
		&i.PersistFs,
		&i.SshKeyName,
		&i.PublicKey,
		&i.SshKeyCreatedAt,
	)
	return i, err
}

const MxSessionsGet = `-- name: MxSessionsGet :many
select s.id,
       s.name,
       s.status,
       s.node_id,
       n.provider,
       s.region,
       s.created_at,
       s.metadata,
       s.persist_fs,
       ssh_key.name       as ssh_key_name,
       ssh_key.public_key,
       ssh_key.created_at as ssh_key_created_at
from unweave.session as s
         join unweave.ssh_key on s.ssh_key_id = ssh_key.id
         join unweave.node as n on s.node_id = n.id
where s.project_id = $1
`

type MxSessionsGetRow struct {
	ID              string               `json:"id"`
	Name            string               `json:"name"`
	Status          UnweaveSessionStatus `json:"status"`
	NodeID          string               `json:"nodeID"`
	Provider        string               `json:"provider"`
	Region          string               `json:"region"`
	CreatedAt       time.Time            `json:"createdAt"`
	Metadata        json.RawMessage      `json:"metadata"`
	PersistFs       bool                 `json:"persistFs"`
	SshKeyName      string               `json:"sshKeyName"`
	PublicKey       string               `json:"publicKey"`
	SshKeyCreatedAt time.Time            `json:"sshKeyCreatedAt"`
}

func (q *Queries) MxSessionsGet(ctx context.Context, projectID string) ([]MxSessionsGetRow, error) {
	rows, err := q.db.QueryContext(ctx, MxSessionsGet, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MxSessionsGetRow
	for rows.Next() {
		var i MxSessionsGetRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.NodeID,
			&i.Provider,
			&i.Region,
			&i.CreatedAt,
			&i.Metadata,
			&i.PersistFs,
			&i.SshKeyName,
			&i.PublicKey,
			&i.SshKeyCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const NodeCreate = `-- name: NodeCreate :exec
select unweave.insert_node(
               $1,
               $2,
               $3,
               $4 :: jsonb,
               $5,
               $6,
               $7 :: text[]
           )
`

type NodeCreateParams struct {
	ID        string          `json:"id"`
	Provider  string          `json:"provider"`
	Region    string          `json:"region"`
	Metadata  json.RawMessage `json:"metadata"`
	Status    string          `json:"status"`
	OwnerID   string          `json:"ownerID"`
	SshKeyIds []string        `json:"sshKeyIds"`
}

func (q *Queries) NodeCreate(ctx context.Context, arg NodeCreateParams) error {
	_, err := q.db.ExecContext(ctx, NodeCreate,
		arg.ID,
		arg.Provider,
		arg.Region,
		arg.Metadata,
		arg.Status,
		arg.OwnerID,
		pq.Array(arg.SshKeyIds),
	)
	return err
}

const NodeStatusUpdate = `-- name: NodeStatusUpdate :exec
update unweave.node
set status        = $2,
    ready_at      = coalesce($3, ready_at),
    terminated_at = coalesce($4, terminated_at)
where id = $1
`

type NodeStatusUpdateParams struct {
	ID           string       `json:"id"`
	Status       string       `json:"status"`
	ReadyAt      sql.NullTime `json:"readyAt"`
	TerminatedAt sql.NullTime `json:"terminatedAt"`
}

func (q *Queries) NodeStatusUpdate(ctx context.Context, arg NodeStatusUpdateParams) error {
	_, err := q.db.ExecContext(ctx, NodeStatusUpdate,
		arg.ID,
		arg.Status,
		arg.ReadyAt,
		arg.TerminatedAt,
	)
	return err
}

const ProjectGet = `-- name: ProjectGet :one
select id, default_build_id
from unweave.project
where id = $1
`

func (q *Queries) ProjectGet(ctx context.Context, id string) (UnweaveProject, error) {
	row := q.db.QueryRowContext(ctx, ProjectGet, id)
	var i UnweaveProject
	err := row.Scan(&i.ID, &i.DefaultBuildID)
	return i, err
}

const SSHKeyAdd = `-- name: SSHKeyAdd :exec
insert into unweave.ssh_key (owner_id, name, public_key)
values ($1, $2, $3)
`

type SSHKeyAddParams struct {
	OwnerID   string `json:"ownerID"`
	Name      string `json:"name"`
	PublicKey string `json:"publicKey"`
}

func (q *Queries) SSHKeyAdd(ctx context.Context, arg SSHKeyAddParams) error {
	_, err := q.db.ExecContext(ctx, SSHKeyAdd, arg.OwnerID, arg.Name, arg.PublicKey)
	return err
}

const SSHKeyGetByName = `-- name: SSHKeyGetByName :one
select id, name, owner_id, created_at, public_key, is_active
from unweave.ssh_key
where name = $1
  and owner_id = $2
`

type SSHKeyGetByNameParams struct {
	Name    string `json:"name"`
	OwnerID string `json:"ownerID"`
}

func (q *Queries) SSHKeyGetByName(ctx context.Context, arg SSHKeyGetByNameParams) (UnweaveSshKey, error) {
	row := q.db.QueryRowContext(ctx, SSHKeyGetByName, arg.Name, arg.OwnerID)
	var i UnweaveSshKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.PublicKey,
		&i.IsActive,
	)
	return i, err
}

const SSHKeyGetByPublicKey = `-- name: SSHKeyGetByPublicKey :one
select id, name, owner_id, created_at, public_key, is_active
from unweave.ssh_key
where public_key = $1
  and owner_id = $2
`

type SSHKeyGetByPublicKeyParams struct {
	PublicKey string `json:"publicKey"`
	OwnerID   string `json:"ownerID"`
}

func (q *Queries) SSHKeyGetByPublicKey(ctx context.Context, arg SSHKeyGetByPublicKeyParams) (UnweaveSshKey, error) {
	row := q.db.QueryRowContext(ctx, SSHKeyGetByPublicKey, arg.PublicKey, arg.OwnerID)
	var i UnweaveSshKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.PublicKey,
		&i.IsActive,
	)
	return i, err
}

const SSHKeysGet = `-- name: SSHKeysGet :many
select id, name, owner_id, created_at, public_key, is_active
from unweave.ssh_key
where owner_id = $1
`

func (q *Queries) SSHKeysGet(ctx context.Context, ownerID string) ([]UnweaveSshKey, error) {
	rows, err := q.db.QueryContext(ctx, SSHKeysGet, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnweaveSshKey
	for rows.Next() {
		var i UnweaveSshKey
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.CreatedAt,
			&i.PublicKey,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SessionCreate = `-- name: SessionCreate :exec
insert into unweave.session (id, node_id, created_by, project_id, ssh_key_id,
                             region, name, metadata, commit_id, git_remote_url, command,
                             build_id, persist_fs)
values ($1, $2, $3, $4, (select id
                         from unweave.ssh_key as ssh_keys
                         where ssh_keys.name = $13
                           and owner_id = $3), $5, $6, $7, $8, $9, $10, $11, $12)
`

type SessionCreateParams struct {
	ID           string          `json:"id"`
	NodeID       string          `json:"nodeID"`
	CreatedBy    string          `json:"createdBy"`
	ProjectID    string          `json:"projectID"`
	Region       string          `json:"region"`
	Name         string          `json:"name"`
	Metadata     json.RawMessage `json:"metadata"`
	CommitID     sql.NullString  `json:"commitID"`
	GitRemoteUrl sql.NullString  `json:"gitRemoteUrl"`
	Command      []string        `json:"command"`
	BuildID      sql.NullString  `json:"buildID"`
	PersistFs    bool            `json:"persistFs"`
	SshKeyName   string          `json:"sshKeyName"`
}

func (q *Queries) SessionCreate(ctx context.Context, arg SessionCreateParams) error {
	_, err := q.db.ExecContext(ctx, SessionCreate,
		arg.ID,
		arg.NodeID,
		arg.CreatedBy,
		arg.ProjectID,
		arg.Region,
		arg.Name,
		arg.Metadata,
		arg.CommitID,
		arg.GitRemoteUrl,
		pq.Array(arg.Command),
		arg.BuildID,
		arg.PersistFs,
		arg.SshKeyName,
	)
	return err
}

const SessionGet = `-- name: SessionGet :one
select id, name, node_id, region, created_by, created_at, ready_at, exited_at, status, project_id, ssh_key_id, error, build_id, spec, commit_id, git_remote_url, command, metadata, persist_fs
from unweave.session
where id = $1 or name = $1
`

func (q *Queries) SessionGet(ctx context.Context, idOrName string) (UnweaveSession, error) {
	row := q.db.QueryRowContext(ctx, SessionGet, idOrName)
	var i UnweaveSession
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.NodeID,
		&i.Region,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ReadyAt,
		&i.ExitedAt,
		&i.Status,
		&i.ProjectID,
		&i.SshKeyID,
		&i.Error,
		&i.BuildID,
		&i.Spec,
		&i.CommitID,
		&i.GitRemoteUrl,
		pq.Array(&i.Command),
		&i.Metadata,
		&i.PersistFs,
	)
	return i, err
}

const SessionGetAllActive = `-- name: SessionGetAllActive :many
select id, name, node_id, region, created_by, created_at, ready_at, exited_at, status, project_id, ssh_key_id, error, build_id, spec, commit_id, git_remote_url, command, metadata, persist_fs
from unweave.session
where status = 'initializing'
   or status = 'running'
`

func (q *Queries) SessionGetAllActive(ctx context.Context) ([]UnweaveSession, error) {
	rows, err := q.db.QueryContext(ctx, SessionGetAllActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnweaveSession
	for rows.Next() {
		var i UnweaveSession
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.NodeID,
			&i.Region,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ReadyAt,
			&i.ExitedAt,
			&i.Status,
			&i.ProjectID,
			&i.SshKeyID,
			&i.Error,
			&i.BuildID,
			&i.Spec,
			&i.CommitID,
			&i.GitRemoteUrl,
			pq.Array(&i.Command),
			&i.Metadata,
			&i.PersistFs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SessionSetError = `-- name: SessionSetError :exec
update unweave.session
set status = 'error'::unweave.session_status,
    error  = $2
where id = $1
`

type SessionSetErrorParams struct {
	ID    string         `json:"id"`
	Error sql.NullString `json:"error"`
}

func (q *Queries) SessionSetError(ctx context.Context, arg SessionSetErrorParams) error {
	_, err := q.db.ExecContext(ctx, SessionSetError, arg.ID, arg.Error)
	return err
}

const SessionStatusUpdate = `-- name: SessionStatusUpdate :exec
update unweave.session
set status    = $2,
    ready_at  = coalesce($3, ready_at),
    exited_at = coalesce($4, exited_at)
where id = $1
`

type SessionStatusUpdateParams struct {
	ID       string               `json:"id"`
	Status   UnweaveSessionStatus `json:"status"`
	ReadyAt  sql.NullTime         `json:"readyAt"`
	ExitedAt sql.NullTime         `json:"exitedAt"`
}

func (q *Queries) SessionStatusUpdate(ctx context.Context, arg SessionStatusUpdateParams) error {
	_, err := q.db.ExecContext(ctx, SessionStatusUpdate,
		arg.ID,
		arg.Status,
		arg.ReadyAt,
		arg.ExitedAt,
	)
	return err
}

const SessionUpdateConnectionInfo = `-- name: SessionUpdateConnectionInfo :exec
update unweave.session
set metadata = jsonb_set(metadata, '{connection_info}', $2::jsonb)
where id = $1
`

type SessionUpdateConnectionInfoParams struct {
	ID             string          `json:"id"`
	ConnectionInfo json.RawMessage `json:"connectionInfo"`
}

func (q *Queries) SessionUpdateConnectionInfo(ctx context.Context, arg SessionUpdateConnectionInfoParams) error {
	_, err := q.db.ExecContext(ctx, SessionUpdateConnectionInfo, arg.ID, arg.ConnectionInfo)
	return err
}

const SessionsGet = `-- name: SessionsGet :many
select session.id, ssh_key.name as ssh_key_name, session.status
from unweave.session
         left join unweave.ssh_key
                   on ssh_key.id = session.ssh_key_id
where project_id = $1
order by unweave.session.created_at desc
limit $2 offset $3
`

type SessionsGetParams struct {
	ProjectID string `json:"projectID"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

type SessionsGetRow struct {
	ID         string               `json:"id"`
	SshKeyName sql.NullString       `json:"sshKeyName"`
	Status     UnweaveSessionStatus `json:"status"`
}

func (q *Queries) SessionsGet(ctx context.Context, arg SessionsGetParams) ([]SessionsGetRow, error) {
	rows, err := q.db.QueryContext(ctx, SessionsGet, arg.ProjectID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionsGetRow
	for rows.Next() {
		var i SessionsGetRow
		if err := rows.Scan(&i.ID, &i.SshKeyName, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
