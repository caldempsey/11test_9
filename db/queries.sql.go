// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const SSHKeyAdd = `-- name: SSHKeyAdd :exec
INSERT INTO unweave.ssh_keys (owner_id, name, public_key) VALUES ($1, $2, $3)
`

type SSHKeyAddParams struct {
	OwnerID   uuid.UUID `json:"ownerID"`
	Name      string    `json:"name"`
	PublicKey string    `json:"publicKey"`
}

func (q *Queries) SSHKeyAdd(ctx context.Context, arg SSHKeyAddParams) error {
	_, err := q.db.ExecContext(ctx, SSHKeyAdd, arg.OwnerID, arg.Name, arg.PublicKey)
	return err
}

const SSHKeyGetByName = `-- name: SSHKeyGetByName :one
SELECT id, name, owner_id, created_at, public_key FROM unweave.ssh_keys WHERE name = $1
`

func (q *Queries) SSHKeyGetByName(ctx context.Context, name string) (UnweaveSshKey, error) {
	row := q.db.QueryRowContext(ctx, SSHKeyGetByName, name)
	var i UnweaveSshKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.PublicKey,
	)
	return i, err
}

const SSHKeyGetByPublicKey = `-- name: SSHKeyGetByPublicKey :one
SELECT id, name, owner_id, created_at, public_key FROM unweave.ssh_keys WHERE public_key = $1
`

func (q *Queries) SSHKeyGetByPublicKey(ctx context.Context, publicKey string) (UnweaveSshKey, error) {
	row := q.db.QueryRowContext(ctx, SSHKeyGetByPublicKey, publicKey)
	var i UnweaveSshKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.PublicKey,
	)
	return i, err
}

const SessionGet = `-- name: SessionGet :one
SELECT id, created_by, created_at, ready_at, exited_at, project_id, runtime FROM unweave.sessions WHERE id = $1
`

func (q *Queries) SessionGet(ctx context.Context, id uuid.UUID) (UnweaveSession, error) {
	row := q.db.QueryRowContext(ctx, SessionGet, id)
	var i UnweaveSession
	err := row.Scan(
		&i.ID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ReadyAt,
		&i.ExitedAt,
		&i.ProjectID,
		&i.Runtime,
	)
	return i, err
}
