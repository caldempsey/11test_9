// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: execs.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const ExecListActiveByProvider = `-- name: ExecListActiveByProvider :many
select id, name, node_id, region, created_by, created_at, ready_at, exited_at, status, project_id, ssh_key_id, error, build_id, spec, commit_id, git_remote_url, command, metadata, image, provider
from unweave.exec as e
where provider = $1 and (status = 'initializing'
   or status = 'running')
`

func (q *Queries) ExecListActiveByProvider(ctx context.Context, provider string) ([]UnweaveExec, error) {
	rows, err := q.db.QueryContext(ctx, ExecListActiveByProvider, provider)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnweaveExec
	for rows.Next() {
		var i UnweaveExec
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.NodeID,
			&i.Region,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ReadyAt,
			&i.ExitedAt,
			&i.Status,
			&i.ProjectID,
			&i.SshKeyID,
			&i.Error,
			&i.BuildID,
			&i.Spec,
			&i.CommitID,
			&i.GitRemoteUrl,
			pq.Array(&i.Command),
			&i.Metadata,
			&i.Image,
			&i.Provider,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ExecListByProvider = `-- name: ExecListByProvider :many
select id, name, node_id, region, created_by, created_at, ready_at, exited_at, status, project_id, ssh_key_id, error, build_id, spec, commit_id, git_remote_url, command, metadata, image, provider
from unweave.exec as e
where e.provider = $1
`

func (q *Queries) ExecListByProvider(ctx context.Context, provider string) ([]UnweaveExec, error) {
	rows, err := q.db.QueryContext(ctx, ExecListByProvider, provider)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnweaveExec
	for rows.Next() {
		var i UnweaveExec
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.NodeID,
			&i.Region,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ReadyAt,
			&i.ExitedAt,
			&i.Status,
			&i.ProjectID,
			&i.SshKeyID,
			&i.Error,
			&i.BuildID,
			&i.Spec,
			&i.CommitID,
			&i.GitRemoteUrl,
			pq.Array(&i.Command),
			&i.Metadata,
			&i.Image,
			&i.Provider,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
